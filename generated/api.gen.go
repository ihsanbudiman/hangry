// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CreatePromoRequestSegmentation.
const (
	CreatePromoRequestSegmentationALL       CreatePromoRequestSegmentation = "ALL"
	CreatePromoRequestSegmentationCITY      CreatePromoRequestSegmentation = "CITY"
	CreatePromoRequestSegmentationLOYALUSER CreatePromoRequestSegmentation = "LOYAL_USER"
	CreatePromoRequestSegmentationNEWUSER   CreatePromoRequestSegmentation = "NEW_USER"
)

// Defines values for CreatePromoRequestType.
const (
	CreatePromoRequestTypeBUYXGETYFREE       CreatePromoRequestType = "BUY_X_GET_Y_FREE"
	CreatePromoRequestTypePERCENTAGEDISCOUNT CreatePromoRequestType = "PERCENTAGE_DISCOUNT"
)

// Defines values for PromoSegmentation.
const (
	PromoSegmentationALL       PromoSegmentation = "ALL"
	PromoSegmentationCITY      PromoSegmentation = "CITY"
	PromoSegmentationLOYALUSER PromoSegmentation = "LOYAL_USER"
	PromoSegmentationNEWUSER   PromoSegmentation = "NEW_USER"
)

// Defines values for PromoType.
const (
	PromoTypeBUYXGETYFREE       PromoType = "BUY_X_GET_Y_FREE"
	PromoTypePERCENTAGEDISCOUNT PromoType = "PERCENTAGE_DISCOUNT"
)

// AddCartRequest defines model for AddCartRequest.
type AddCartRequest struct {
	ProductId int `json:"productId"`
	Quantity  int `json:"quantity"`
	UserId    int `json:"userId"`
}

// CreatePromoRequest defines model for CreatePromoRequest.
type CreatePromoRequest struct {
	BuyItemCount      *int                           `json:"buyItemCount,omitempty"`
	BuyProductId      *int                           `json:"buyProductId,omitempty"`
	Cities            *[]string                      `json:"cities,omitempty"`
	Description       *string                        `json:"description,omitempty"`
	DiscountValue     *float32                       `json:"discountValue,omitempty"`
	EndDate           time.Time                      `json:"endDate"`
	FreeItemCount     *int                           `json:"freeItemCount,omitempty"`
	FreeProductId     *int                           `json:"freeProductId,omitempty"`
	MaxDiscountAmount *float32                       `json:"maxDiscountAmount,omitempty"`
	MaxUsageLimit     *int                           `json:"maxUsageLimit,omitempty"`
	MinOrderAmount    *float32                       `json:"minOrderAmount,omitempty"`
	Name              string                         `json:"name"`
	Segmentation      CreatePromoRequestSegmentation `json:"segmentation"`
	StartDate         time.Time                      `json:"startDate"`
	Type              CreatePromoRequestType         `json:"type"`
}

// CreatePromoRequestSegmentation defines model for CreatePromoRequest.Segmentation.
type CreatePromoRequestSegmentation string

// CreatePromoRequestType defines model for CreatePromoRequest.Type.
type CreatePromoRequestType string

// CreatePromoResponse defines model for CreatePromoResponse.
type CreatePromoResponse struct {
	Data struct {
		PromoId *int `json:"promoId,omitempty"`
	} `json:"data"`
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message string                  `json:"message"`
}

// ExtendPromoRequest defines model for ExtendPromoRequest.
type ExtendPromoRequest struct {
	EndDate   time.Time `json:"endDate"`
	StartDate time.Time `json:"startDate"`
}

// GetPromoResponse defines model for GetPromoResponse.
type GetPromoResponse struct {
	Data    *[]Promo `json:"data,omitempty"`
	Message *string  `json:"message,omitempty"`
	Meta    Meta     `json:"meta"`
}

// Meta defines model for Meta.
type Meta struct {
	Limit   int `json:"limit"`
	Page    int `json:"page"`
	PerPage int `json:"per_page"`
	Total   int `json:"total"`
}

// PostOrderRequest defines model for PostOrderRequest.
type PostOrderRequest struct {
	PromoIds *[]int `json:"promoIds,omitempty"`
	UserId   int    `json:"userId"`
}

// Promo defines model for Promo.
type Promo struct {
	BuyItemCount      *int              `json:"buyItemCount,omitempty"`
	BuyProductId      *int              `json:"buyProductId,omitempty"`
	Cities            []string          `json:"cities"`
	Description       string            `json:"description"`
	DiscountValue     *float32          `json:"discountValue,omitempty"`
	EndDate           time.Time         `json:"endDate"`
	FreeItemCount     *int              `json:"freeItemCount,omitempty"`
	FreeProductId     *int              `json:"freeProductId,omitempty"`
	Id                int               `json:"id"`
	MaxDiscountAmount *float32          `json:"maxDiscountAmount,omitempty"`
	MaxUsageLimit     int               `json:"maxUsageLimit"`
	MinOrderAmount    *float32          `json:"minOrderAmount,omitempty"`
	Name              string            `json:"name"`
	Segmentation      PromoSegmentation `json:"segmentation"`
	StartDate         time.Time         `json:"startDate"`
	Type              PromoType         `json:"type"`
}

// PromoSegmentation defines model for Promo.Segmentation.
type PromoSegmentation string

// PromoType defines model for Promo.Type.
type PromoType string

// RemoveFromCartRequest defines model for RemoveFromCartRequest.
type RemoveFromCartRequest struct {
	ProductId int `json:"productId"`
	UserId    int `json:"userId"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Data    *map[string]interface{} `json:"data"`
	Message string                  `json:"message"`
}

// GetGetPromoParams defines parameters for GetGetPromo.
type GetGetPromoParams struct {
	// UserId User ID
	UserId int `form:"userId" json:"userId"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// PostAddCartJSONRequestBody defines body for PostAddCart for application/json ContentType.
type PostAddCartJSONRequestBody = AddCartRequest

// PostOrderJSONRequestBody defines body for PostOrder for application/json ContentType.
type PostOrderJSONRequestBody = PostOrderRequest

// PostPromoJSONRequestBody defines body for PostPromo for application/json ContentType.
type PostPromoJSONRequestBody = CreatePromoRequest

// PostPromoIdExtendJSONRequestBody defines body for PostPromoIdExtend for application/json ContentType.
type PostPromoIdExtendJSONRequestBody = ExtendPromoRequest

// PostRemoveFromCartJSONRequestBody defines body for PostRemoveFromCart for application/json ContentType.
type PostRemoveFromCartJSONRequestBody = RemoveFromCartRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a product to the cart
	// (POST /add-cart)
	PostAddCart(ctx echo.Context) error
	// Get promos
	// (GET /get-promo)
	GetGetPromo(ctx echo.Context, params GetGetPromoParams) error
	// Check the health of the service
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Place an order
	// (POST /order)
	PostOrder(ctx echo.Context) error
	// Create a promo
	// (POST /promo)
	PostPromo(ctx echo.Context) error
	// Extend the promo
	// (POST /promo/{id}/extend)
	PostPromoIdExtend(ctx echo.Context, id int) error
	// Remove a product from the cart
	// (POST /remove-from-cart)
	PostRemoveFromCart(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAddCart converts echo context to params.
func (w *ServerInterfaceWrapper) PostAddCart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAddCart(ctx)
	return err
}

// GetGetPromo converts echo context to params.
func (w *ServerInterfaceWrapper) GetGetPromo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGetPromoParams
	// ------------- Required query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, true, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGetPromo(ctx, params)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// PostOrder converts echo context to params.
func (w *ServerInterfaceWrapper) PostOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOrder(ctx)
	return err
}

// PostPromo converts echo context to params.
func (w *ServerInterfaceWrapper) PostPromo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPromo(ctx)
	return err
}

// PostPromoIdExtend converts echo context to params.
func (w *ServerInterfaceWrapper) PostPromoIdExtend(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPromoIdExtend(ctx, id)
	return err
}

// PostRemoveFromCart converts echo context to params.
func (w *ServerInterfaceWrapper) PostRemoveFromCart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRemoveFromCart(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/add-cart", wrapper.PostAddCart)
	router.GET(baseURL+"/get-promo", wrapper.GetGetPromo)
	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.POST(baseURL+"/order", wrapper.PostOrder)
	router.POST(baseURL+"/promo", wrapper.PostPromo)
	router.POST(baseURL+"/promo/:id/extend", wrapper.PostPromoIdExtend)
	router.POST(baseURL+"/remove-from-cart", wrapper.PostRemoveFromCart)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
