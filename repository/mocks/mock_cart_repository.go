// Code generated by MockGen. DO NOT EDIT.
// Source: ./cart_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "hangry/domain/models"
	repository "hangry/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartRepository) AddToCart(ctx context.Context, tx *gorm.DB, input *models.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", ctx, tx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartRepositoryMockRecorder) AddToCart(ctx, tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartRepository)(nil).AddToCart), ctx, tx, input)
}

// CheckItem mocks base method.
func (m *MockCartRepository) CheckItem(ctx context.Context, tx *gorm.DB, input repository.CheckItemInput) (models.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckItem", ctx, tx, input)
	ret0, _ := ret[0].(models.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckItem indicates an expected call of CheckItem.
func (mr *MockCartRepositoryMockRecorder) CheckItem(ctx, tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckItem", reflect.TypeOf((*MockCartRepository)(nil).CheckItem), ctx, tx, input)
}

// CreateCart mocks base method.
func (m *MockCartRepository) CreateCart(ctx context.Context, tx *gorm.DB, userId uint) (models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", ctx, tx, userId)
	ret0, _ := ret[0].(models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartRepositoryMockRecorder) CreateCart(ctx, tx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartRepository)(nil).CreateCart), ctx, tx, userId)
}

// GetUserCart mocks base method.
func (m *MockCartRepository) GetUserCart(ctx context.Context, tx *gorm.DB, input repository.GetUserCartInput) (models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCart", ctx, tx, input)
	ret0, _ := ret[0].(models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCart indicates an expected call of GetUserCart.
func (mr *MockCartRepositoryMockRecorder) GetUserCart(ctx, tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCart", reflect.TypeOf((*MockCartRepository)(nil).GetUserCart), ctx, tx, input)
}

// RemoveCartItem mocks base method.
func (m *MockCartRepository) RemoveCartItem(ctx context.Context, tx *gorm.DB, cartItemId []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCartItem", ctx, tx, cartItemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCartItem indicates an expected call of RemoveCartItem.
func (mr *MockCartRepositoryMockRecorder) RemoveCartItem(ctx, tx, cartItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartItem", reflect.TypeOf((*MockCartRepository)(nil).RemoveCartItem), ctx, tx, cartItemId)
}
